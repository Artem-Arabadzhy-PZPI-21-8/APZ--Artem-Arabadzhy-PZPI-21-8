МЕТА РОБОТИ

Метою цієї лабораторної роботи є розробка клієнтської (front-end) частини для проекту за темою «Програмна система роботи мережі салонів краси». Ця частина системи повинна підтримувати роботу клієнтів у веб-режимі та забезпечувати адміністрування системи.

ХІД РОБОТИ

У ході цієї лабораторної роботи була розроблена Front-end частина застосунку для управління салонами краси та додавання записів на процедуру. Вона призначена для користувачів системи та адміністраторів. Клієнтська частина була розроблена на мові програмування JavaScript з використанням Next.js. 
Для зберігання авторизації користувача використовується бібліотека NextAuth, яка забезпечує аутентифікацію та авторизацію, використовуючи провайдери, такі як Google. NextAuth обробляє збереження сесій та токенів автоматично, надаючи безпечний спосіб керування аутентифікацією користувачів. 
Для зв’язку із серверною частиною програмної системи було використано вбудовані бібліотеки та системи Next,js.

1 ДІАГРАМА ПРЕЦЕДЕНТІВ

На рисунку 1 зображено діаграму прецедентів для клієнтської частини програмної системи BarberNer. На цій діаграмі зображено основних акторів системи – користувачів, тобто відвідувачів веб-застосунку, та адміністратора системи.
Рисунок 1 – Діаграма прецедентів до клієнтської частини
На діаграмі прецедентів можемо побачити, що користувач системи може зареєструватися, авторизуватися, переглянути особистий профіль, створити новий запис, переглядати список салонів та їх послуг. Адміністратор у програмі може керувати користувачами, управляти доступом до функцій адміністрування та налаштувань, переглядати та редагувати дані користувачів і сервісів, створювати та видаляти записи, а також здійснювати інші адміністративні функції.

2 ДІАГРАМА КОМПОНЕНТІВ

У додатку А на рисунку А1 зображено діаграму компонентів. На цій діаграмі вказана взаємодія між основними компонентами програмної системи – клієнтською частиною та серверною частиною.

3 ДІАГРАМА ВЗАЄМОДІЇ

У додатку Б на рисунку Б.1 зображено діаграму взаємодії для процесу додавання нового запису в базу даних. На діаграмі можна побачити що користувачеві для початку необхідно авторизуватися, далі йому необхідно перейти на сторінку створення нового запис. На цій сторінці користувач вводить необхідні дані після чого сервер перевіряє дані на правильність і при коректному заповненні інформації зберігає дані у базі даних

4 ДІАГРАМА СТАНІВ

У додатку В на рисунку В.1 зображено діаграму станів до клієнтської частини програмної системи «BarberNet», а саме процес отримання інформації про послугу що надає обраний салон. Можна побачити, що користувач повинен авторизуватися, далі йому необхідно перейти на сторінку зі списком салонів. На цій сторінці користувач обирає необхідний салон і переходить до сторінки перегляду інформації про салон, де він може перейти на сторінку перегляду списку послуг що надає салон. Користувач може обрати необхідну йому послугу та при переході отримує всю наявну інформацію за послугу.

5 АРХІТЕКТУРА КЛІЄНТСЬКОЇ ЧАСТИНИ

Для архітектури клієнтської частини програмної системи було використано стандартну архітектуру проекту бібліотек Next.js, де є такі директорії як public та src. Також була створена директорія components для зберігання усіх компонентів, директорія types для зберігання усіх класів (типів) колекцій що отримуються з бд.
У додатку Г на рисунку Г.1 зображено структуру клієнтської частини програмної системи «BarberNet». Можемо бачити, що головною директорією є src, в ній є директорії app де зберігаються всі файли сторінок та їх візуальна частина. У директорії components зберігаються усі частини коду що відповідають за сортування, виведення та фільтрації інформації, та частини коду що відповідають за навігацію. У директорії lib зберігаються  файли з методами що використовуються у коді та файл MongoConnect, який необхідний для отримання та перетворення колекцій з бази даних. У директорї types збережено усі класи (типи) відповідних колекцій з бази даних.
У додатку Д показано код що надає права адміністратора користувачеві. У додатку Е показано код що надає можливість реєструвати користувача.

ВИСНОВКИ

У даній лабораторній роботі було створено клієнтську (front-end) частину програмної системи за темою «Програмна система для моніторингу місцеположення та фізіологічних показників спеціальних служб у реальному часі з метою забезпечення безпеки та ефективності у виконанні завдань» з використанням Next.Js.
За допомогою бліотеки NextAuth, яка забезпечує аутентифікацію та авторизацію. Також за допомогою вбудованих можливостей Next.Js. front-end частину було пов’язано з back-end частиною.

Посилання на демо-відео:
Посилання на репозиторій GitHub:
https://github.com/NureArabadzhyArtem/apz-pzpi-21-8-arabadzhy-artem
