МЕТА РОБОТИ

Метою цієї лабораторної роботи є розробка backend-частини для проекту за темою «Програмна система роботи мережі салонів краси». Необхідно реалізувати основний функціонал системи, описаний у документі Vision & Scope, за виключенням IoT-девайсу

ХІД РОБОТИ

У ході роботи було розроблено базу даних з використанням MongoDB. MongoDB є широко використовуваною системою керування базами даних з не реляційною структурою, підтримкою документів JSON-подібного формату. MongoDB дозволяє зберігати дані у вигляді колекцій документів, що спрощує роботу з даними, особливо при змінюваній схемі даних. Вона ідеально підходить для веб-додатків, що використовують JavaScript на обох сторонах (клієнтській та серверній), таких як програмна система управління мережею салонів краси, побудована на Next.JS.
MongoDB також підтримує кілька мов програмування для виконання функцій і процедур, зокрема JavaScript, що може використовуватися для виконання операцій на базі даних безпосередньо з веб-додатків.
Функції MongoDB можуть виконуватись з привілеями користувача, що її викликав, або з привілеями користувача, що її написав, забезпечуючи гнучкий контроль доступу до даних.



1	ДІАГРАМА РОЗГОРТАННЯ

Для написання серверної частини коду у проекті з використанням Next.js були використані наступні технології та бібліотеки: 
Next.js: фреймворк React з відкритим кодом, який забезпечує платформу для розробки веб-додатків з підтримкою SSR і SSG. 
React: бібліотека JavaScript для створення інтерфейсів користувача. 
TypeScript: типізована версія JavaScript, яка забезпечує покращену підтримку типізації та дозволяє виявляти помилки на етапі розробки. 
MongoDB: документоорієнтована NoSQL база даних, яка забезпечує гнучкість у зберіганні та операціях з даними. 
Для зв'язку з базою даних MongoDB та визначення моделей даних використовується вбудована бібліотека Next.JS, який надає зручний інтерфейс для взаємодії з MongoDB та визначення зв'язків між документами.
У проекті використовуються серверні компоненти Next.js для покращення швидкодії та взаємодії з базою даних, а також для створення API ендпоінтів та обробки запитів від клієнтської частини застосунку.
Проект розбито на три шари:
User Interface – сторінки та компоненти, з якими користувач взаємодіє.
Бізнес-логіка – логіка додатку та обробка даних.
Доступ до даних – взаємодія з базою даних MongoDB через вбудовані бібліотеки Next.JS
Розглянемо Deployment Diagram (діаграму розгортання), зображену на рисунку 2.2.1.

2	ДІАГРАМА ПРЕЦЕДЕНТІВ

Розглянемо Use Case діаграму, зображену на рисунку 2.2.2. Можна побачити, що адміністратор має можливість переглядати, додавати, редагувати та видаляти користувачів, ролі, інструменти, записи, сервіси, салони та їх працівників. Користувач має можливість авторизуватися, переглядати салони, сервіси, та створювати нові записи. 
Рис. 2.2.2 – Діаграма прецедентів

3 ER-МОДЕЛЬ ДАНИХ

Для реалізації було створено наступні колекції:
Appointments (колекція даних про записи)
Users (колекція даних користувачів);
Salons (колекція даних про салони)
Services (колекція даних про послуги).
Tools (колекція даних про інструменти)
Workers (колекція даних про працівників)

Відношення між колекціями:
Користувач може мати лише одну роль (адміністратор та користувач). Одна роль може бути у багатьох користувачів.
Користувач може мати багато записів (на сеанс). Запис належить одному користувачу, може обслуговувати один працівник, містить одну послугу та належить одному салону.
Один салон може мати багато працівників, надавати багато послуг та мати багато записів.
Одна послуга може бути частиною багатьох записів та може надаватися в багатьох салонах.
Один інструмент належить одному салону.
Один працівник може обслуговувати багато записів, належить до одного салону.
Графічне подання зв’язків між таблицями бази даних подано на рисунку 2.1
ER-модель даних

4 ДІАГРАМА ДІЯЛЬНОСТІ

Розглянемо Діаграму діяльності. В даній діаграмі відображений алгоритм роботи створення та відображення інформації про рослину та відправки повідомлень на пошту при створенні компанії (приклад коду наведено в додатку В). Activity diagram відображена на рисунку 2.2.3.

5 REST СПЕЦИФІКАЦІЯ

При написанні запитів було дотримано принципів REST.
REST - це архітектурний підхід до проектування мережевих протоколів, який надає стандартизований спосіб доступу до інформаційних ресурсів. В основі REST лежать принципи, які взято з функціонування Всесвітньої павутини і особливо використовують можливості протоколу HTTP. REST-архітектура визначає, як система повинна бути організована, аби бути масштабованою, гнучкою та забезпечувати простоту інтеграції між різними компонентами. Таблиця 1 наводить основні специфікації REST.
Таблиця 1 –  REST-специфікація
Отримання даних за ідентифікатором
GET
/api/data/{data}/{id}
Оновлення даних за ідентифікатором
PUT
/api/data/{data}/{id}
Видалення даних за ідентифікатором
DELETE
/api/data/{data}/{id}
Отримання всіх даних з колекції
GET
/api/data/{data}
Створення нового запису
POST
/api/data/{data}
Авторизація користувача
GET/POST
/api/auth

Продовження таблиці 1
Створення нового запису (appointments)
POST
/api/appointments/create
Отримання всіх записів користувача
GET
/api/appointments/user/{userId}
Отримання всіх послуг
GET
/api/data/services
Отримання всіх працівників
GET
/api/data/workers
Отримання всіх записів
GET
/api/data/appointments
Отримання всіх записів користувача
GET
/api/appointments/user/{userId}

ВИСНОВКИ

У ході роботи було спроектовано та розроблено бекенд-частину застосунку, розроблено діаграми, вказано REST-специфікацію та записано демо-відео.
Посилання на демо-відео:
https://youtu.be/z8WBxAYXr_0
Посилання на репозиторій GitHub:
https://github.com/NureArabadzhyArtem/apz-pzpi-21-8-arabadzhy-artem
